{"version":3,"sources":["webpack:///smart-array-filter/webpack/universalModuleDefinition","webpack:///smart-array-filter/smart-array-filter.min.js","webpack:///smart-array-filter/webpack/bootstrap c59872bce192c86403ec","webpack:///smart-array-filter/./src/index.js","webpack:///smart-array-filter/./src/operators.js","webpack:///smart-array-filter/./src/parseKeywords.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","filter","array","options","result","insensitive","caseSensitive","keywords","parseKeywords","map","keyword","criterion","is","key","negate","valueReg","undefined","charAt","substring","colon","indexOf","value","RegExp","fillCriterion","i","length","match","predicate","push","strKey","reg","checkString","str","test","exec","checkNumber","returnFalse","operator","mainNumber","parseFloat","dots","otherNumber","operators","other","element","found","recursiveMatch","Array","isArray","nativeMatch","<","<=","=",">=",">","inQuotes","inSeparator","currentWord","previous","current","pop","separators","join"],"mappings":"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","file":"smart-array-filter.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"smartArrayFilter\"] = factory();\n\telse\n\t\troot[\"smartArrayFilter\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"smartArrayFilter\"] = factory();\n\telse\n\t\troot[\"smartArrayFilter\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tmodule.exports = filter;\n\tmodule.exports.match = match;\n\t\n\tvar operators = __webpack_require__(1);\n\tvar parseKeywords = __webpack_require__(2);\n\t\n\tfunction filter(array, options) {\n\t    options = options || {};\n\t    var result = [];\n\t\n\t    var insensitive = options.caseSensitive ? '' : 'i';\n\t    var keywords = options.keywords || [];\n\t    if (typeof keywords === 'string') {\n\t        keywords = parseKeywords(keywords);\n\t    }\n\t    keywords = keywords.map(function (keyword) {\n\t        var criterion = {\n\t            is: false,\n\t            key: false,\n\t            negate: false,\n\t            valueReg: undefined\n\t        };\n\t\n\t        if (keyword.charAt(0) === '-') {\n\t            criterion.negate = true;\n\t            keyword = keyword.substring(1);\n\t        }\n\t        var colon = keyword.indexOf(':');\n\t        if (colon > -1) {\n\t            var value = keyword.substring(colon + 1);\n\t            if (colon > 0) {\n\t                var key = keyword.substring(0, colon);\n\t                if (key === 'is') {\n\t                    criterion.is = new RegExp('^' + value + '$', insensitive);\n\t                }\n\t                criterion.key = key;\n\t            }\n\t            fillCriterion(criterion, value, insensitive);\n\t        } else {\n\t            fillCriterion(criterion, keyword, insensitive);\n\t        }\n\t\n\t        return criterion;\n\t    });\n\t    for (var i = 0; i < array.length; i++) {\n\t        if (match(array[i], keywords, options.predicate || 'AND')) {\n\t            result.push(array[i]);\n\t        }\n\t    }\n\t    return result;\n\t}\n\t\n\tfunction fillCriterion(criterion, keyword, insensitive) {\n\t\n\t    var strKey = keyword;\n\t    if (keyword.charAt(0) === '=') {\n\t        strKey = '^' + keyword.substring(1) + '$';\n\t    }\n\t    var reg = new RegExp(strKey, insensitive);\n\t    criterion.checkString = function (str) { return reg.test(str) };\n\t\n\t    var match = /(<|<=|=|>=|>|\\.\\.)?(\\d+)(?:(\\.\\.)(\\d*))?/.exec(keyword);\n\t    var checkNumber = returnFalse;\n\t    if (match) {\n\t        var operator = match[1];\n\t        var mainNumber = parseFloat(match[2]);\n\t        var dots = match[3];\n\t        var otherNumber = match[4];\n\t        if (operator) {\n\t            checkNumber = operators[operator](mainNumber);\n\t        } else if (dots) {\n\t            if (otherNumber !== '') {\n\t                otherNumber = parseFloat(otherNumber);\n\t                checkNumber = function (other) {\n\t                    return mainNumber <= other && other <= otherNumber;\n\t                };\n\t            } else {\n\t                checkNumber = operators['>='](mainNumber);\n\t            }\n\t        } else {\n\t            checkNumber = operators['='](mainNumber);\n\t        }\n\t    }\n\t\n\t    criterion.checkNumber = checkNumber;\n\t}\n\t\n\tfunction match(element, keywords, predicate) {\n\t    if (keywords.length) {\n\t        var found = false;\n\t        for (var i = 0; i < keywords.length; i++) {\n\t            // match XOR negate\n\t            if (recursiveMatch(element, keywords[i]) ? !keywords[i].negate : keywords[i].negate) {\n\t                if (predicate === 'OR') {\n\t                    return true;\n\t                }\n\t                found = true;\n\t            } else if (predicate === 'AND') {\n\t                return false;\n\t            }\n\t        }\n\t        return found;\n\t    }\n\t    return true;\n\t}\n\t\n\tfunction recursiveMatch(element, keyword, key) {\n\t    if (typeof element === 'object') {\n\t        if (Array.isArray(element)) {\n\t            for (var i = 0; i < element.length; i++) {\n\t                if (recursiveMatch(element[i], keyword)) {\n\t                    return true;\n\t                }\n\t            }\n\t        } else {\n\t            for (var i in element) {\n\t                if (recursiveMatch(element[i], keyword, i)) {\n\t                    return true;\n\t                }\n\t            }\n\t        }\n\t    } else if (key && keyword.is && keyword.is.test(key)) {\n\t        return !!element;\n\t    } else if (!keyword.is) {\n\t        if (key && keyword.key && key !== keyword.key) return false;\n\t        return nativeMatch(element, keyword);\n\t    }\n\t    return false;\n\t}\n\t\n\tfunction nativeMatch(element, keyword) {\n\t    if (typeof element === 'string') {\n\t        return keyword.checkString(element);\n\t    } else if (typeof element === 'number') {\n\t        return keyword.checkNumber(element);\n\t    } else {\n\t        return false;\n\t    }\n\t}\n\t\n\tfunction returnFalse() {\n\t    return false;\n\t}\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tvar operators = {\n\t    '<': function (value) {\n\t        return function (other) {\n\t            return other < value;\n\t        }\n\t    },\n\t    '<=': function (value) {\n\t        return function (other) {\n\t            return other <= value;\n\t        }\n\t    },\n\t    '=': function (value) {\n\t        return function (other) {\n\t            return other === value;\n\t        }\n\t    },\n\t    '>=': function (value) {\n\t        return function (other) {\n\t            return other >= value;\n\t        }\n\t    },\n\t    '>': function (value) {\n\t        return function (other) {\n\t            return other > value;\n\t        }\n\t    }\n\t};\n\t\n\toperators['..'] = operators['<='];\n\t\n\tmodule.exports = operators;\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tvar separators = /[ ;,\\t\\r\\n]/;\n\t\n\tmodule.exports = parseKeywords;\n\t\n\tfunction parseKeywords(keywords) {\n\t    var result = [];\n\t    var inQuotes = false;\n\t    var inSeparator = true;\n\t    var currentWord = [];\n\t    var previous = '';\n\t    for (var i = 0; i < keywords.length; i++) {\n\t        var current = keywords.charAt(i);\n\t        if (inQuotes) {\n\t            if (previous === '\"') {\n\t                // escaped quote\n\t                if (current === '\"') {\n\t                    previous = '';\n\t                    continue;\n\t                }\n\t                // end of quoted part\n\t                currentWord.pop(); // remove last quote that was added\n\t                inQuotes = false;\n\t                i--;\n\t                continue;\n\t            }\n\t            currentWord.push(current);\n\t            previous = current;\n\t            continue;\n\t        }\n\t        if (inSeparator) {\n\t            // still in separator ?\n\t            if (separators.test(current)) {\n\t                previous = current;\n\t                continue;\n\t            }\n\t            inSeparator = false;\n\t        }\n\t        // start of quoted part\n\t        if (current === '\"') {\n\t            inQuotes = true;\n\t            previous = '';\n\t            continue;\n\t        }\n\t        // start of separator part\n\t        if (separators.test(current)) {\n\t            if (currentWord.length) result.push(currentWord.join(''));\n\t            currentWord = [];\n\t            inSeparator = true;\n\t            continue;\n\t        }\n\t        currentWord.push(current);\n\t        previous = '';\n\t    }\n\t\n\t    if (previous === '\"') currentWord.pop();\n\t    if (currentWord.length) result.push(currentWord.join(''));\n\t\n\t    return result;\n\t}\n\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** smart-array-filter.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap c59872bce192c86403ec\n **/","'use strict';\n\nmodule.exports = filter;\nmodule.exports.match = match;\n\nvar operators = require('./operators');\nvar parseKeywords = require('./parseKeywords');\n\nfunction filter(array, options) {\n    options = options || {};\n    var result = [];\n\n    var insensitive = options.caseSensitive ? '' : 'i';\n    var keywords = options.keywords || [];\n    if (typeof keywords === 'string') {\n        keywords = parseKeywords(keywords);\n    }\n    keywords = keywords.map(function (keyword) {\n        var criterion = {\n            is: false,\n            key: false,\n            negate: false,\n            valueReg: undefined\n        };\n\n        if (keyword.charAt(0) === '-') {\n            criterion.negate = true;\n            keyword = keyword.substring(1);\n        }\n        var colon = keyword.indexOf(':');\n        if (colon > -1) {\n            var value = keyword.substring(colon + 1);\n            if (colon > 0) {\n                var key = keyword.substring(0, colon);\n                if (key === 'is') {\n                    criterion.is = new RegExp('^' + value + '$', insensitive);\n                }\n                criterion.key = key;\n            }\n            fillCriterion(criterion, value, insensitive);\n        } else {\n            fillCriterion(criterion, keyword, insensitive);\n        }\n\n        return criterion;\n    });\n    for (var i = 0; i < array.length; i++) {\n        if (match(array[i], keywords, options.predicate || 'AND')) {\n            result.push(array[i]);\n        }\n    }\n    return result;\n}\n\nfunction fillCriterion(criterion, keyword, insensitive) {\n\n    var strKey = keyword;\n    if (keyword.charAt(0) === '=') {\n        strKey = '^' + keyword.substring(1) + '$';\n    }\n    var reg = new RegExp(strKey, insensitive);\n    criterion.checkString = function (str) { return reg.test(str) };\n\n    var match = /(<|<=|=|>=|>|\\.\\.)?(\\d+)(?:(\\.\\.)(\\d*))?/.exec(keyword);\n    var checkNumber = returnFalse;\n    if (match) {\n        var operator = match[1];\n        var mainNumber = parseFloat(match[2]);\n        var dots = match[3];\n        var otherNumber = match[4];\n        if (operator) {\n            checkNumber = operators[operator](mainNumber);\n        } else if (dots) {\n            if (otherNumber !== '') {\n                otherNumber = parseFloat(otherNumber);\n                checkNumber = function (other) {\n                    return mainNumber <= other && other <= otherNumber;\n                };\n            } else {\n                checkNumber = operators['>='](mainNumber);\n            }\n        } else {\n            checkNumber = operators['='](mainNumber);\n        }\n    }\n\n    criterion.checkNumber = checkNumber;\n}\n\nfunction match(element, keywords, predicate) {\n    if (keywords.length) {\n        var found = false;\n        for (var i = 0; i < keywords.length; i++) {\n            // match XOR negate\n            if (recursiveMatch(element, keywords[i]) ? !keywords[i].negate : keywords[i].negate) {\n                if (predicate === 'OR') {\n                    return true;\n                }\n                found = true;\n            } else if (predicate === 'AND') {\n                return false;\n            }\n        }\n        return found;\n    }\n    return true;\n}\n\nfunction recursiveMatch(element, keyword, key) {\n    if (typeof element === 'object') {\n        if (Array.isArray(element)) {\n            for (var i = 0; i < element.length; i++) {\n                if (recursiveMatch(element[i], keyword)) {\n                    return true;\n                }\n            }\n        } else {\n            for (var i in element) {\n                if (recursiveMatch(element[i], keyword, i)) {\n                    return true;\n                }\n            }\n        }\n    } else if (key && keyword.is && keyword.is.test(key)) {\n        return !!element;\n    } else if (!keyword.is) {\n        if (key && keyword.key && key !== keyword.key) return false;\n        return nativeMatch(element, keyword);\n    }\n    return false;\n}\n\nfunction nativeMatch(element, keyword) {\n    if (typeof element === 'string') {\n        return keyword.checkString(element);\n    } else if (typeof element === 'number') {\n        return keyword.checkNumber(element);\n    } else {\n        return false;\n    }\n}\n\nfunction returnFalse() {\n    return false;\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/index.js\n ** module id = 0\n ** module chunks = 0\n **/","'use strict';\n\nvar operators = {\n    '<': function (value) {\n        return function (other) {\n            return other < value;\n        }\n    },\n    '<=': function (value) {\n        return function (other) {\n            return other <= value;\n        }\n    },\n    '=': function (value) {\n        return function (other) {\n            return other === value;\n        }\n    },\n    '>=': function (value) {\n        return function (other) {\n            return other >= value;\n        }\n    },\n    '>': function (value) {\n        return function (other) {\n            return other > value;\n        }\n    }\n};\n\noperators['..'] = operators['<='];\n\nmodule.exports = operators;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/operators.js\n ** module id = 1\n ** module chunks = 0\n **/","'use strict';\n\nvar separators = /[ ;,\\t\\r\\n]/;\n\nmodule.exports = parseKeywords;\n\nfunction parseKeywords(keywords) {\n    var result = [];\n    var inQuotes = false;\n    var inSeparator = true;\n    var currentWord = [];\n    var previous = '';\n    for (var i = 0; i < keywords.length; i++) {\n        var current = keywords.charAt(i);\n        if (inQuotes) {\n            if (previous === '\"') {\n                // escaped quote\n                if (current === '\"') {\n                    previous = '';\n                    continue;\n                }\n                // end of quoted part\n                currentWord.pop(); // remove last quote that was added\n                inQuotes = false;\n                i--;\n                continue;\n            }\n            currentWord.push(current);\n            previous = current;\n            continue;\n        }\n        if (inSeparator) {\n            // still in separator ?\n            if (separators.test(current)) {\n                previous = current;\n                continue;\n            }\n            inSeparator = false;\n        }\n        // start of quoted part\n        if (current === '\"') {\n            inQuotes = true;\n            previous = '';\n            continue;\n        }\n        // start of separator part\n        if (separators.test(current)) {\n            if (currentWord.length) result.push(currentWord.join(''));\n            currentWord = [];\n            inSeparator = true;\n            continue;\n        }\n        currentWord.push(current);\n        previous = '';\n    }\n\n    if (previous === '\"') currentWord.pop();\n    if (currentWord.length) result.push(currentWord.join(''));\n\n    return result;\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/parseKeywords.js\n ** module id = 2\n ** module chunks = 0\n **/"],"sourceRoot":""}