{"version":3,"file":"smart-array-filter.js","sources":["../node_modules/.pnpm/lodash.escaperegexp@4.1.2/node_modules/lodash.escaperegexp/index.js","../src/getCheckNumber.js","../src/getCheckString.js","../src/parseKeywords.js","../src/index.js"],"sourcesContent":["/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/6.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g,\n    reHasRegExpChar = RegExp(reRegExpChar.source);\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\n/**\n * Escapes the `RegExp` special characters \"^\", \"$\", \"\\\", \".\", \"*\", \"+\",\n * \"?\", \"(\", \")\", \"[\", \"]\", \"{\", \"}\", and \"|\" in `string`.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to escape.\n * @returns {string} Returns the escaped string.\n * @example\n *\n * _.escapeRegExp('[lodash](https://lodash.com/)');\n * // => '\\[lodash\\]\\(https://lodash\\.com/\\)'\n */\nfunction escapeRegExp(string) {\n  string = toString(string);\n  return (string && reHasRegExpChar.test(string))\n    ? string.replace(reRegExpChar, '\\\\$&')\n    : string;\n}\n\nmodule.exports = escapeRegExp;\n","const operators = {\n  '<': (query) => {\n    return function (number) {\n      return number < query;\n    };\n  },\n  '<=': (query) => {\n    return function (number) {\n      return number <= query;\n    };\n  },\n  '=': (query) => {\n    return function (number) {\n      return number === query;\n    };\n  },\n  '>=': (query) => {\n    return function (number) {\n      return number >= query;\n    };\n  },\n  '>': (query) => {\n    return function (number) {\n      return number > query;\n    };\n  },\n};\n\n// we also deal with ..10 and 10..\noperators['..'] = operators['<='];\n\nexport default function getCheckNumber(keyword) {\n  let match = /^\\s*\\(?\\s*(<|<=|=|>=|>|\\.\\.)?(-?\\d*\\.?\\d+)(?:(\\.\\.)(-?\\d*\\.?\\d*))?\\s*\\)?\\s*$/.exec(\n    keyword,\n  );\n  let checkNumber = () => false;\n  if (match) {\n    let operator = match[1];\n    let query = parseFloat(match[2]);\n    let dots = match[3];\n    let secondQuery = match[4];\n    if (operator) {\n      checkNumber = operators[operator](query);\n    } else if (dots) {\n      if (secondQuery !== '') {\n        secondQuery = parseFloat(secondQuery);\n        checkNumber = function (number) {\n          return query <= number && number <= secondQuery;\n        };\n      } else {\n        checkNumber = operators['>='](query);\n      }\n    } else {\n      checkNumber = operators['='](query);\n    }\n  }\n  return checkNumber;\n}\n","import escapeRegExp from 'lodash.escaperegexp';\n\nconst operators = {\n  '<': (query) => {\n    return function (string) {\n      return string < query;\n    };\n  },\n  '<=': (query) => {\n    return function (string) {\n      return string <= query;\n    };\n  },\n  '=': (query, insensitive) => {\n    query = `^${escapeRegExp(query)}$`;\n    const reg = new RegExp(query, insensitive);\n\n    return function (string) {\n      return reg.test(string);\n    };\n  },\n  '~': (query, insensitive) => {\n    query = escapeRegExp(query);\n    const reg = new RegExp(query, insensitive);\n\n    return function (string) {\n      return reg.test(string);\n    };\n  },\n  '>=': (query) => {\n    return function (string) {\n      return string >= query;\n    };\n  },\n  '>': (query) => {\n    return function (string) {\n      return string > query;\n    };\n  },\n};\n\noperators['..'] = operators['<='];\n\nexport default function getCheckString(keyword, insensitive) {\n  let match = /^\\s*\\(?\\s*(<|<=|=|>=|>|\\.\\.)?([a-zA-Z0-9_-]+)([a-zA-Z(?:(\\.\\.)0-9_-]+)?\\s*\\)?$/.exec(\n    keyword,\n  );\n  let checkString = () => false;\n  if (match) {\n    let operator = match[1];\n    let query = match[2];\n    let dots = match[3];\n    let secondQuery = match[4];\n    if (operator) {\n      checkString = operators[operator](query, insensitive);\n    } else if (dots) {\n      if (secondQuery !== '') {\n        secondQuery = parseFloat(secondQuery);\n        checkString = function (string) {\n          return query <= string && string <= secondQuery;\n        };\n      } else {\n        checkString = operators['>='](query, insensitive);\n      }\n    } else {\n      checkString = operators['~'](query, insensitive);\n    }\n  }\n  return checkString;\n}\n","let separators = /[ ;,\\t\\r\\n]/;\n\nexport default function parseKeywords(keywords) {\n  let result = [];\n  let inQuotes = false;\n  let inSeparator = true;\n  let currentWord = [];\n  let previous = '';\n  for (let i = 0; i < keywords.length; i++) {\n    let current = keywords.charAt(i);\n    if (inQuotes) {\n      if (previous === '\"') {\n        // escaped quote\n        if (current === '\"') {\n          previous = '';\n          continue;\n        }\n        // end of quoted part\n        currentWord.pop(); // remove last quote that was added\n        inQuotes = false;\n        i--;\n        continue;\n      }\n      currentWord.push(current);\n      previous = current;\n      continue;\n    }\n    if (inSeparator) {\n      // still in separator ?\n      if (separators.test(current)) {\n        previous = current;\n        continue;\n      }\n      inSeparator = false;\n    }\n    // start of quoted part\n    if (current === '\"') {\n      inQuotes = true;\n      previous = '';\n      continue;\n    }\n    // start of separator part\n    if (separators.test(current)) {\n      if (currentWord.length) result.push(currentWord.join(''));\n      currentWord = [];\n      inSeparator = true;\n      continue;\n    }\n    currentWord.push(current);\n    previous = '';\n  }\n\n  if (previous === '\"') currentWord.pop();\n  if (currentWord.length) result.push(currentWord.join(''));\n\n  return result;\n}\n","import escapeRegExp from 'lodash.escaperegexp';\n\nimport getCheckNumber from './getCheckNumber';\nimport getCheckString from './getCheckString';\nimport parseKeywords from './parseKeywords';\n\nexport function filter(array, options = {}) {\n  let result = [];\n\n  let limit = options.limit || Infinity;\n  let insensitive = options.caseSensitive ? '' : 'i';\n  let keywords = options.keywords || [];\n  if (typeof keywords === 'string') {\n    keywords = parseKeywords(keywords);\n  }\n  keywords = keywords.map(function (keyword) {\n    let criterion = {\n      is: false,\n      key: false,\n      negate: false,\n      valueReg: undefined,\n    };\n\n    if (keyword.charAt(0) === '-') {\n      criterion.negate = true;\n      keyword = keyword.substring(1);\n    }\n    let colon = keyword.indexOf(':');\n    if (colon > -1) {\n      let value = keyword.substring(colon + 1);\n      if (colon > 0) {\n        let key = keyword.substring(0, colon);\n        if (key === 'is') {\n          criterion.is = new RegExp(`^${escapeRegExp(value)}$`, insensitive);\n        }\n        criterion.key = key;\n      }\n      fillCriterion(criterion, value, insensitive);\n    } else {\n      fillCriterion(criterion, keyword, insensitive);\n    }\n\n    return criterion;\n  });\n\n  let index = !!options.index;\n  let matched = 0;\n  for (let i = 0; i < array.length && matched < limit; i++) {\n    if (match(array[i], keywords, options.predicate || 'AND')) {\n      matched = result.push(index ? i : array[i]);\n    }\n  }\n  return result;\n}\n\nfunction fillCriterion(criterion, keyword, insensitive) {\n  criterion.checkString = getCheckString(keyword, insensitive);\n  criterion.checkNumber = getCheckNumber(keyword);\n}\n\nexport function match(element, keywords, predicate) {\n  if (keywords.length) {\n    let found = false;\n    for (let i = 0; i < keywords.length; i++) {\n      // match XOR negate\n      if (\n        recursiveMatch(element, keywords[i])\n          ? !keywords[i].negate\n          : keywords[i].negate\n      ) {\n        if (predicate === 'OR') {\n          return true;\n        }\n        found = true;\n      } else if (predicate === 'AND') {\n        return false;\n      }\n    }\n    return found;\n  }\n  return true;\n}\n\nfunction recursiveMatch(element, keyword, key) {\n  if (typeof element === 'object') {\n    if (Array.isArray(element)) {\n      for (let i = 0; i < element.length; i++) {\n        if (recursiveMatch(element[i], keyword)) {\n          console.log(element[i], keyword);\n          console.log('TRUE');\n          return true;\n        }\n      }\n    } else {\n      for (let i in element) {\n        if (recursiveMatch(element[i], keyword, i)) {\n          return true;\n        }\n      }\n    }\n  } else if (key && keyword.is && keyword.is.test(key)) {\n    return !!element;\n  } else if (!keyword.is) {\n    if (key && keyword.key && key !== keyword.key) return false;\n    return nativeMatch(element, keyword);\n  }\n  return false;\n}\n\nfunction nativeMatch(element, keyword) {\n  if (typeof element === 'string') {\n    return keyword.checkString(element);\n  } else if (typeof element === 'number') {\n    return keyword.checkNumber(element);\n  } else {\n    return false;\n  }\n}\n"],"names":["INFINITY","symbolTag","reRegExpChar","reHasRegExpChar","RegExp","source","freeGlobal","global","Object","freeSelf","self","root","Function","objectProto","prototype","objectToString","toString","Symbol","symbolProto","undefined","symbolToString","baseToString","value","isSymbol","call","result","isObjectLike","escapeRegExp","string","test","replace","operators","query","number","getCheckNumber","keyword","match","exec","checkNumber","operator","parseFloat","dots","secondQuery","insensitive","reg","getCheckString","checkString","separators","parseKeywords","keywords","inQuotes","inSeparator","currentWord","previous","i","length","current","charAt","pop","push","join","filter","array","options","limit","Infinity","caseSensitive","map","criterion","is","key","negate","valueReg","substring","colon","indexOf","fillCriterion","index","matched","predicate","element","found","recursiveMatch","Array","isArray","console","log","nativeMatch"],"mappings":"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"}